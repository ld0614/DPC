using Microsoft.VisualStudio.TestTools.UnitTesting;
using DPCService.Models;
using DPCLibrary.Utils;
using DPCLibrary.Models;
using DPCService.Utils;

namespace ServiceIntegrationTests
{
    [TestClass]
    [TestCategory("Administrator")]
    public class AccessWMITests
    {
        /// <summary>
        ///  Gets or sets the test context which provides
        ///  information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext { get; set; }

        //Maintain a single, consistent view of the OS State across Tests to help with clearing profiles
        private SharedData sharedData;

        [TestInitialize]
        public void PreTestInitialize()
        {
            sharedData = new SharedData(60, true, false, TestContext.CancellationTokenSource.Token);
            HelperFunctions.ClearETWEvents();
            HelperFunctions.ClearProfiles(sharedData);
            HelperFunctions.ClearRegistry();
        }

        [TestCleanup]
        public void PostTestCleanup()
        {
            bool skipProfileErrors = HelperFunctions.ClearProfiles(sharedData);
            if (skipProfileErrors)
            {
                HelperFunctions.ClearSpecificEventId(1158); //Failed to Delete Profile
            }
            HelperFunctions.CheckNoErrors(TestContext);
        }

        [TestMethod]
        public void BasicUserProfile()
        {
            HelperFunctions.BasicUserProfile(sharedData, TestContext.TestName, TestContext.CancellationTokenSource.Token, TestContext);
            Assert.AreEqual(1, ManageRasphonePBK.ListAllProfiles(false).Count);
        }

        [TestMethod]
        [TestCategory("MachineTunnel")]
        public void CreateBasicMachineProfile()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DeviceTunnel>true</DeviceTunnel><DnsSuffix>dpc.local</DnsSuffix><TrustedNetworkDetection>dpc.local</TrustedNetworkDetection><NativeProfile><Servers>aovpn.dpc.com;aovpn.dpc.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>Ikev2</NativeProtocolType><Authentication><MachineMethod>Certificate</MachineMethod></Authentication><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute></NativeProfile><Route><Address>10.0.0.0</Address><PrefixSize>8</PrefixSize><Metric>1</Metric></Route><RegisterDNS>true</RegisterDNS></VPNProfile>";
            ManagedProfile profile = new ManagedProfile()
            {
                ProfileName = profileName,
                ProfileXML = basicProfile
            };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
            //Need to use ProfileAction now as it handles the device tunnel profile rename logic
            //AccessWMI.NewProfile(profileName, basicProfile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        [TestCategory("MachineTunnel")]
        public void CreateWorkingMachineProfile()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>lab.systemcenter.ninja,systemcenter.ninja</DnsSuffix><TrustedNetworkDetection>lab.systemcenter.ninja</TrustedNetworkDetection><DeviceTunnel>true</DeviceTunnel><RegisterDNS>true</RegisterDNS><NativeProfile><Servers>aovpn.systemcenter.ninja</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><MachineMethod>Certificate</MachineMethod></Authentication></NativeProfile><!-- DC01 --><Route><Address>10.0.0.15</Address><PrefixSize>32</PrefixSize></Route><!-- DC02 --><Route><Address>10.0.0.16</Address><PrefixSize>32</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile()
            {
                ProfileName = profileName,
                ProfileXML = basicProfile
            };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
            //Need to use ProfileAction now as it handles the device tunnel profile rename logic
            //AccessWMI.NewProfile(profileName, basicProfile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        [TestCategory("MachineTunnel")]
        public void UpdateMachineEKUNoEKUs()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>lab.systemcenter.ninja,systemcenter.ninja</DnsSuffix><TrustedNetworkDetection>lab.systemcenter.ninja</TrustedNetworkDetection><DeviceTunnel>true</DeviceTunnel><RegisterDNS>true</RegisterDNS><NativeProfile><Servers>aovpn.systemcenter.ninja</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><MachineMethod>Certificate</MachineMethod></Authentication></NativeProfile><!-- DC01 --><Route><Address>10.0.0.15</Address><PrefixSize>32</PrefixSize></Route><!-- DC02 --><Route><Address>10.0.0.16</Address><PrefixSize>32</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        [TestCategory("MachineTunnel")]
        public void UpdateMachineEKU1EKUs()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>lab.systemcenter.ninja,systemcenter.ninja</DnsSuffix><TrustedNetworkDetection>lab.systemcenter.ninja</TrustedNetworkDetection><DeviceTunnel>true</DeviceTunnel><RegisterDNS>true</RegisterDNS><NativeProfile><Servers>aovpn.systemcenter.ninja</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><MachineMethod>Certificate</MachineMethod></Authentication></NativeProfile><!-- DC01 --><Route><Address>10.0.0.15</Address><PrefixSize>32</PrefixSize></Route><!-- DC02 --><Route><Address>10.0.0.16</Address><PrefixSize>32</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        [TestCategory("MachineTunnel")]
        public void UpdateMachineEKU2EKUs()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>lab.systemcenter.ninja,systemcenter.ninja</DnsSuffix><TrustedNetworkDetection>lab.systemcenter.ninja</TrustedNetworkDetection><DeviceTunnel>true</DeviceTunnel><RegisterDNS>true</RegisterDNS><NativeProfile><Servers>aovpn.systemcenter.ninja</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><MachineMethod>Certificate</MachineMethod></Authentication></NativeProfile><!-- DC01 --><Route><Address>10.0.0.15</Address><PrefixSize>32</PrefixSize></Route><!-- DC02 --><Route><Address>10.0.0.16</Address><PrefixSize>32</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        [TestCategory("MachineTunnel")]
        public void UpdateMachineEnableThenDisableEKU()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>lab.systemcenter.ninja,systemcenter.ninja</DnsSuffix><TrustedNetworkDetection>lab.systemcenter.ninja</TrustedNetworkDetection><DeviceTunnel>true</DeviceTunnel><RegisterDNS>true</RegisterDNS><NativeProfile><Servers>aovpn.systemcenter.ninja</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><MachineMethod>Certificate</MachineMethod></Authentication></NativeProfile><!-- DC01 --><Route><Address>10.0.0.15</Address><PrefixSize>32</PrefixSize></Route><!-- DC02 --><Route><Address>10.0.0.16</Address><PrefixSize>32</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        public void UpdateUserNoProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        public void UpdateUserNoProxyExclusionsManualProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><Proxy><Manual><Server>test.proxy.net:8080</Server></Manual></Proxy><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        public void UpdateUserNoProxyExclusionsBypassLocalManualProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><Proxy><Manual><Server>test.proxy.net:8080</Server></Manual></Proxy><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        public void UpdateUserNoProxyExclusionsAutoConfigProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><Proxy><AutoConfigUrl>http://proxy.contoso.com/vpnproxy.pac</AutoConfigUrl></Proxy><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        public void UpdateUserProxyExclusionsManualProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><Proxy><Manual><Server>test.proxy.net:8080</Server></Manual></Proxy><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        public void UpdateUserProxyExclusionsWithBypassManualProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><Proxy><Manual><Server>test.proxy.net:8080</Server></Manual></Proxy><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        public void UpdateUser2ProxyExclusionsManualProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><Proxy><Manual><Server>test.proxy.net:8080</Server></Manual></Proxy><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        [TestMethod]
        public void UpdateUserProxyExclusionsAndBypassEnableThenDisableManualProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><Proxy><Manual><Server>test.proxy.net:8080</Server></Manual></Proxy><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }

        //Throws error cleanly when doing something not possible
        [TestMethod]
        public void UpdateUserProxyExclusionsAutoConfigProxy()
        {
            string profileName = TestContext.TestName;
            string basicProfile = "<VPNProfile><AlwaysOn>true</AlwaysOn><DnsSuffix>test.local</DnsSuffix><TrustedNetworkDetection>test.local</TrustedNetworkDetection><RegisterDNS>false</RegisterDNS><Proxy><AutoConfigUrl>http://proxy.contoso.com/vpnproxy.pac</AutoConfigUrl></Proxy><NativeProfile><Servers>aovpn.test.com</Servers><RoutingPolicyType>SplitTunnel</RoutingPolicyType><NativeProtocolType>IKEv2</NativeProtocolType><DisableClassBasedDefaultRoute>true</DisableClassBasedDefaultRoute><CryptographySuite><AuthenticationTransformConstants>SHA256128</AuthenticationTransformConstants><CipherTransformConstants>AES128</CipherTransformConstants><PfsGroup>PFS2048</PfsGroup><DHGroup>Group14</DHGroup><IntegrityCheckMethod>SHA256</IntegrityCheckMethod><EncryptionMethod>AES128</EncryptionMethod></CryptographySuite><Authentication><UserMethod>Eap</UserMethod><Eap><Configuration><EapHostConfig xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><EapMethod><Type xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">25</Type><VendorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorId><VendorType xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</VendorType><AuthorId xmlns=\"http://www.microsoft.com/provisioning/EapCommon\">0</AuthorId></EapMethod><Config xmlns=\"http://www.microsoft.com/provisioning/EapHostConfig\"><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>25</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV1\"><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><InnerEapOptional>false</InnerEapOptional><Eap xmlns=\"http://www.microsoft.com/provisioning/BaseEapConnectionPropertiesV1\"><Type>13</Type><EapType xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV1\"><CredentialsSource><CertificateStore><SimpleCertSelection>true</SimpleCertSelection></CertificateStore></CredentialsSource><ServerValidation><DisableUserPromptForServerValidation>true</DisableUserPromptForServerValidation><ServerNames>nps1.test.local</ServerNames><TrustedRootCA>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</TrustedRootCA></ServerValidation><DifferentUsername>false</DifferentUsername><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\">true</AcceptServerName><TLSExtensions xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV2\"><FilteringInfo xmlns=\"http://www.microsoft.com/provisioning/EapTlsConnectionPropertiesV3\"><CAHashList Enabled=\"true\"><IssuerHash>CC BE BE 24 B4 BB 06 BE 5C EA 51 55 6D 12 42 2C 72 51 CF AA</IssuerHash></CAHashList></FilteringInfo></TLSExtensions></EapType></Eap><EnableQuarantineChecks>false</EnableQuarantineChecks><RequireCryptoBinding>true</RequireCryptoBinding><PeapExtensions><PerformServerValidation xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</PerformServerValidation><AcceptServerName xmlns=\"http://www.microsoft.com/provisioning/MsPeapConnectionPropertiesV2\">true</AcceptServerName></PeapExtensions></EapType></Eap></Config></EapHostConfig></Configuration></Eap></Authentication></NativeProfile><Route><Address>10.1.0.0</Address><PrefixSize>16</PrefixSize></Route><Route><Address>10.100.0.0</Address><PrefixSize>16</PrefixSize></Route></VPNProfile>";
            ManagedProfile profile = new ManagedProfile() { ProfileName = profileName, ProfileXML = basicProfile };
            ProfileAction.HandleProfileCreate(profile, TestContext.CancellationTokenSource.Token);
        }
    }
}
